//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/Controller/PlayerController.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerController : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerController()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerController"",
    ""maps"": [
        {
            ""name"": ""Controller"",
            ""id"": ""0f20f051-b4da-4194-9bcf-e6ab6309b79d"",
            ""actions"": [
                {
                    ""name"": ""ShootC1"",
                    ""type"": ""PassThrough"",
                    ""id"": ""a878b0ee-3428-4364-87aa-b3dcb16e0251"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ShootC2"",
                    ""type"": ""PassThrough"",
                    ""id"": ""922a36a0-a6f0-435b-b4ad-7b2fc0da1788"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ShootC3"",
                    ""type"": ""PassThrough"",
                    ""id"": ""e6b15ae9-b92d-4cae-8e01-86fc567a3458"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ShootC4"",
                    ""type"": ""PassThrough"",
                    ""id"": ""70294044-fe0b-493f-b3f9-083945bc3335"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ShootC5"",
                    ""type"": ""PassThrough"",
                    ""id"": ""85e8de2f-806a-48ec-be28-887aa52e4429"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4a14153f-d6b6-40a7-9614-aa9bc8543651"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ShootC1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1a7707dd-e22d-49b5-9fff-4c15b6400c5e"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ShootC2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bb5e95a3-589a-4cbc-bbc7-dad63b30d75c"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ShootC3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""aad437fe-7c93-4b84-a38e-6df7038c15e5"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ShootC4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""91b4bd3a-fde9-4f1b-90f1-883c16fc4179"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ShootC5"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Controller
        m_Controller = asset.FindActionMap("Controller", throwIfNotFound: true);
        m_Controller_ShootC1 = m_Controller.FindAction("ShootC1", throwIfNotFound: true);
        m_Controller_ShootC2 = m_Controller.FindAction("ShootC2", throwIfNotFound: true);
        m_Controller_ShootC3 = m_Controller.FindAction("ShootC3", throwIfNotFound: true);
        m_Controller_ShootC4 = m_Controller.FindAction("ShootC4", throwIfNotFound: true);
        m_Controller_ShootC5 = m_Controller.FindAction("ShootC5", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Controller
    private readonly InputActionMap m_Controller;
    private IControllerActions m_ControllerActionsCallbackInterface;
    private readonly InputAction m_Controller_ShootC1;
    private readonly InputAction m_Controller_ShootC2;
    private readonly InputAction m_Controller_ShootC3;
    private readonly InputAction m_Controller_ShootC4;
    private readonly InputAction m_Controller_ShootC5;
    public struct ControllerActions
    {
        private @PlayerController m_Wrapper;
        public ControllerActions(@PlayerController wrapper) { m_Wrapper = wrapper; }
        public InputAction @ShootC1 => m_Wrapper.m_Controller_ShootC1;
        public InputAction @ShootC2 => m_Wrapper.m_Controller_ShootC2;
        public InputAction @ShootC3 => m_Wrapper.m_Controller_ShootC3;
        public InputAction @ShootC4 => m_Wrapper.m_Controller_ShootC4;
        public InputAction @ShootC5 => m_Wrapper.m_Controller_ShootC5;
        public InputActionMap Get() { return m_Wrapper.m_Controller; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ControllerActions set) { return set.Get(); }
        public void SetCallbacks(IControllerActions instance)
        {
            if (m_Wrapper.m_ControllerActionsCallbackInterface != null)
            {
                @ShootC1.started -= m_Wrapper.m_ControllerActionsCallbackInterface.OnShootC1;
                @ShootC1.performed -= m_Wrapper.m_ControllerActionsCallbackInterface.OnShootC1;
                @ShootC1.canceled -= m_Wrapper.m_ControllerActionsCallbackInterface.OnShootC1;
                @ShootC2.started -= m_Wrapper.m_ControllerActionsCallbackInterface.OnShootC2;
                @ShootC2.performed -= m_Wrapper.m_ControllerActionsCallbackInterface.OnShootC2;
                @ShootC2.canceled -= m_Wrapper.m_ControllerActionsCallbackInterface.OnShootC2;
                @ShootC3.started -= m_Wrapper.m_ControllerActionsCallbackInterface.OnShootC3;
                @ShootC3.performed -= m_Wrapper.m_ControllerActionsCallbackInterface.OnShootC3;
                @ShootC3.canceled -= m_Wrapper.m_ControllerActionsCallbackInterface.OnShootC3;
                @ShootC4.started -= m_Wrapper.m_ControllerActionsCallbackInterface.OnShootC4;
                @ShootC4.performed -= m_Wrapper.m_ControllerActionsCallbackInterface.OnShootC4;
                @ShootC4.canceled -= m_Wrapper.m_ControllerActionsCallbackInterface.OnShootC4;
                @ShootC5.started -= m_Wrapper.m_ControllerActionsCallbackInterface.OnShootC5;
                @ShootC5.performed -= m_Wrapper.m_ControllerActionsCallbackInterface.OnShootC5;
                @ShootC5.canceled -= m_Wrapper.m_ControllerActionsCallbackInterface.OnShootC5;
            }
            m_Wrapper.m_ControllerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @ShootC1.started += instance.OnShootC1;
                @ShootC1.performed += instance.OnShootC1;
                @ShootC1.canceled += instance.OnShootC1;
                @ShootC2.started += instance.OnShootC2;
                @ShootC2.performed += instance.OnShootC2;
                @ShootC2.canceled += instance.OnShootC2;
                @ShootC3.started += instance.OnShootC3;
                @ShootC3.performed += instance.OnShootC3;
                @ShootC3.canceled += instance.OnShootC3;
                @ShootC4.started += instance.OnShootC4;
                @ShootC4.performed += instance.OnShootC4;
                @ShootC4.canceled += instance.OnShootC4;
                @ShootC5.started += instance.OnShootC5;
                @ShootC5.performed += instance.OnShootC5;
                @ShootC5.canceled += instance.OnShootC5;
            }
        }
    }
    public ControllerActions @Controller => new ControllerActions(this);
    public interface IControllerActions
    {
        void OnShootC1(InputAction.CallbackContext context);
        void OnShootC2(InputAction.CallbackContext context);
        void OnShootC3(InputAction.CallbackContext context);
        void OnShootC4(InputAction.CallbackContext context);
        void OnShootC5(InputAction.CallbackContext context);
    }
}
